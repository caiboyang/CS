Name: Jun Ma
UCLA ID: 704149452


-------------------------------------------------------------------------------

Response to Exercise 1:

The name of the scheduling algorithm is:
First come first served.

(Exercise 2 is a coding exercise)


Response to Exercise 3:

Average turnaround time for scheduling_algorithm 0:
1: 4*319 + 1, 2: 4*319 + 2, 3: 4*319 + 3, 4: 4*319 + 4.
Avg: sum/4 = 1278.5ms.

Average turnaround time for scheduling_algorithm 1:
1: 320, 2: 320*2, 3: 320*3, 4: 320*4.
Avg: sum/4 = 800ms.

Average wait time for scheduling_algorithm 0:
1: 0, 2: 1, 3: 2, 4: 3.
Avg = sum/4 = 1.5ms.

Average wait time for scheduling_algorithm 1:
1: 0, 2: 320, 3: 320*2, 4: 320*3.
Avg = sum/4 = 480ms.


Exercise 4:

Did you complete Exercise 4A or Exercise 4B?

Both, I did 4B for extra credit, if any.
4A: implement system call sys_priority(int p) function, case INT_SYS_USER1, make sure not to set priority higher than NPROCS. Add p_priority field. Using for-loop to find highest priority pid and using pid+1%NPROCS to keep from stucking at one process. (in my case, set priority to 4, 3, 2, 2 respectively)

4B: implement system call sys_proportional(int p) function, case INT_SYS_USER2. Add p_proportion, p_counter fields, initially set counter of process 1 to 1, others to 0, because initially we will run process 1 once. Using counter to count how many time the process runs and matches with proportion. Using pid+1%NPROCS to keep process moving. (in my case, set proportion to 1, 2 ,3, 4 respectively)

(Asking for extra credit, because I did really bad in midterm :( )

Exercise 5:

process 4. If there is no interrupt, then the 20th character should be 4. Since it is 1, there must be an interrupt happens to process 4. It interrupts process 4 so that process 4's time quantum expired and kernel switch to process 1 and print 1 there. 

(Exercise 6 is a coding exercise)
Implement atomic_print system call. Define INT_SYS_PRINT 52.

Anything else you'd like us to know:


